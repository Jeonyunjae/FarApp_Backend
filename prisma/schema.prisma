// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

//================Location 관련 테이블================
model userlocation{
  usercode      String @id @unique
  userstate      Int
  positionaddress positionaddressinfos?
  postaddress postaddressinfo?
}

model positionaddressinfos {
  usercode      String @id @unique
  loclatitude   Int 
  loclongtitude Int
  userlocation      userlocation   @relation(fields: [usercode], references: [usercode])
}

model postaddressinfo {
  usercode      String @id @unique
  addresscode   String 
  addresscodeinfo    postaddresscodedefineinfo @relation(fields: [addresscode], references: [addresscode])
  userlocation      userlocation   @relation(fields: [usercode], references: [usercode])
}

model postaddresscodedefineinfo {
  countrycode     Int     @unique
  countryname     String  @unique
  address1code    Int     @unique
  address1name    String  @unique
  address2code    Int     @unique
  address2name    String  @unique
  address3code    Int     @unique
  address3name    String  @unique 
  addresscode     String  @id @unique  
  address         postaddressinfo[]
  //address         PostAddressInfo   @relation(fields: [addressCode], references: [addressCode])
}

//================User 관련 테이블================
model userinfo {
  usercode      String    @id @unique
  password      String
  userbasicinfos userbasicinfos? 
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model userbasicinfos {
  usercode      String    @id @unique
  avatar        String?
  phonenumber   String
  email         String    @unique
  checkphone    Boolean   @default(false)
  userinfo      userinfo   @relation(fields: [usercode], references: [usercode])
  rooms         room[]
  message       message[]
  likes         like[]
  sellinfo      sellinfo[]
  followers     userbasicinfos[]   @relation("FollowRelation", references: [usercode])
  following     userbasicinfos[]   @relation("FollowRelation", references: [usercode])
  createdat     DateTime        @default(now())
  updatedat     DateTime        @updatedAt
}

//================Product 관련 테이블================
//사고싶은 물품이나 리스트
//model BuyInfo {
//  unique        String    @id
//  userCode      String 
//  bookMark      Boolean
//  transaction   Boolean
//  createdAt     DateTime  @default(now())
//  updatedAt     DateTime  @updatedAt
//}

model sellinfo {
  unique        String    @id @unique
  usercode      String
  maincomment   String
  subcomment    String
  picture       String
  amount        Int
  hashtags      hashtag[]
  transaction   Boolean
  likes         like[]
  userbasicinfo userbasicinfos     @relation(fields: [usercode], references: [usercode])
  categorycodedefineinfo categorycodedefineinfo @relation(fields: [categorycode], references: [categorycode])
  categorycode  String
  createdat DateTime        @default(now())
  updatedat DateTime        @updatedAt
}

model like {
  id            Int               @id @default(autoincrement())
  sellinfo      sellinfo          @relation(fields: [unique], references: [unique])
  userbasicinfo userbasicinfos     @relation(fields: [usercode], references: [usercode])
  unique        String
  usercode     String
  createdat     DateTime          @default(now())
  updatedat     DateTime          @updatedAt

  @@unique([unique, usercode])
}


model hashtag {
  id        Int      @id @default(autoincrement())
  hashtag   String   @unique
  sellinfos  sellinfo[]
  createdat DateTime @default(now())
  updatedat DateTime @updatedAt
}

model categorycodedefineinfo {
  category1code    Int     
  category1name    String  
  category2code    Int     
  category2name    String  
  category3code    Int     
  category3name    String  
  category4code    Int     
  category4name    String  
  categorycode     String     @id @unique
  sellinfo         sellinfo[]
}

//================Message 관련 테이블================

model room {
  id        Int             @id @default(autoincrement())
  users     userbasicinfos[]
  messages  message[]
  createdat DateTime        @default(now())
  updatedat DateTime        @updatedAt
}

model message {
  id        Int             @id @default(autoincrement())
  payload   String
  usercode  String
  user      userbasicinfos   @relation(fields: [usercode], references: [usercode])
  room      room            @relation(fields: [roomid], references: [id])
  roomid    Int
  read      Boolean         @default(false)
  createdat DateTime        @default(now())
  updatedat DateTime        @updatedAt
}